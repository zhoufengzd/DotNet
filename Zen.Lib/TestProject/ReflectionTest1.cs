// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;

using Zen.Utilities;
using Zen.Utilities.Proc;
using System.Reflection;
using System;
using System.Text;
using System.Collections.Generic;
using Zen.Utilities.Generics;
using Zen.DBMS;

namespace _TestProject
{
    struct Eclipse { }
    enum SoundLevle
    {
        Weak,
        Medium,
        Loud,
        SuperLoad,
        Deaf
    }

    class EmployeeBase<FavoriteT>
    {
        public string FirstName;
        public string LastName;
        public string ZipCode;
        public int EmployeeID;

        public EmployeeBase()
        {
        }
        public EmployeeBase(string First, string Last, string Zip, int ID)
        {
            FirstName = First;
            LastName = Last;
            EmployeeID = ID;
            ZipCode = Zip;
        }

        public string Name
        {
            get { return (FirstName + " " + LastName); }
        }
        public string Zip
        {
            get { return (ZipCode); }
        }
        public int ID
        {
            get { return (EmployeeID); }
        }
        static public int CompareByName(object o1, object o2)
        {
            Employee emp1 = (Employee)o1;
            Employee emp2 = (Employee)o2;
            return (string.Compare(emp1.LastName, emp2.LastName));
        }
        static public int CompareByZip(object o1, object o2)
        {
            Employee emp1 = (Employee)o1;
            Employee emp2 = (Employee)o2;
            return (string.Compare(emp1.ZipCode, emp2.ZipCode));
        }
        static public int CompareByID(object o1, object o2)
        {
            Employee emp1 = (Employee)o1;
            Employee emp2 = (Employee)o2;
            return (emp1.EmployeeID - emp2.EmployeeID);
        }

        protected FavoriteT _favorite;
    }

    class Employee : EmployeeBase<int>
    {
        public delegate bool HasNetWork();
    }

    class Money { }
    class Insight { }


    class Manager : EmployeeBase<Money>
    {
        private string _title;

        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        public void Promote(int id)
        {
        }
    }

    class TemplatedInspector<T> : Employee
    {
        public TemplatedInspector()
        {
        }

        public T SpecialRights
        {
            get { return _specialRights; }
            set { _specialRights = value; }
        }
        private T _specialRights;
    }

    [TestClass()]
    public class ReflectionTest1 : TestBase
    {
        //[TestMethod()]
        public void GetPropertyNamesTest()
        {
            PropertyInterrogator.GetPropertyNames(typeof(ProcEnvironInfo));

            ProcEnvironInfo env = new ProcEnvironInfo();
            string[] propertyNames = { "WorkingDir", "SysDir" };
            object obj = null;
            foreach (string pName in propertyNames)
            {
                obj = PropertyInterrogator.GetPropertyValue(env, pName);
            }
        }

        //[TestMethod()]
        public void SubTypeTest()
        {
            Assert.IsTrue(TypeInterrogator.IsSubclass(typeof(EmployeeBase<>), typeof(Manager)));
            Assert.IsTrue(TypeInterrogator.IsSubclass(typeof(EmployeeBase<>), typeof(TemplatedInspector<int>)));

            Employee inspector = new TemplatedInspector<Insight>();
            Assert.IsTrue(TypeInterrogator.IsSubclass(typeof(EmployeeBase<>), inspector.GetType()));

            Employee emp = new Employee();
            Assert.IsFalse(emp.GetType().IsGenericType);
            Assert.IsTrue(TypeInterrogator.IsSubclass(emp.GetType(), inspector.GetType()));
            Assert.IsTrue(TypeInterrogator.IsSubclass(typeof(EmployeeBase<>), emp.GetType()));

            Eclipse? it = new Eclipse();
            Assert.IsFalse(TypeInterrogator.IsSubclass(typeof(EmployeeBase<>), it.GetType()));

            List<EmployeeBase<int>> xlist = new List<EmployeeBase<int>>();
            Assert.IsTrue(xlist.GetType().IsGenericType);
        }

        [TestMethod]
        public void IsValueTypeTest()
        {
            Eclipse? it = new Eclipse();
            Assert.IsTrue(TypeInterrogator.IsValueType(it.GetType()));

            SoundLevle sl = SoundLevle.Deaf;
            Assert.IsTrue(TypeInterrogator.IsValueType(sl.GetType()));

            double x = 6.0;
            Assert.IsTrue(TypeInterrogator.IsNumericType(x.GetType()));

            Assert.IsTrue(TypeInterrogator.IsStrcutType(typeof(Eclipse)));
            Assert.IsFalse(TypeInterrogator.IsStrcutType(typeof(EmployeeBase<int>)));
            Assert.IsFalse(TypeInterrogator.IsStrcutType(typeof(EmployeeBase<>)));

            Assert.IsTrue(TypeInterrogator.IsReferenceType(typeof(EmployeeBase<>)));
            Assert.IsTrue(TypeInterrogator.IsReferenceType(typeof(Employee.HasNetWork)));
            Assert.IsTrue(TypeInterrogator.IsDelegateType(typeof(Employee.HasNetWork)));

        }

        [TestMethod]
        public void ReflectionTest()
        {
            string result = null;

            result = QueryType(typeof(Employee));
            result = QueryType(typeof(Manager));
        }

        [TestMethod]
        public void SerializationTest()
        {
            bool testDictionary = false;
            bool testList = true;

            if (testDictionary)
            {
                string dcFile = "dictionary.xml";
                Dictionary<int, string> td1 = new Dictionary<int, string>();
                td1.Add(1, "One");
                td1.Add(2, "Two");
                td1.Add(3, "Three");

                ObjSerializer.Save(dcFile, td1);

                Dictionary<int, string> td2 = ObjSerializer.Load<Dictionary<int, string>>(dcFile);
                foreach (int key in td1.Keys)
                {
                    Assert.IsTrue(td1[key] == td2[key]);
                }
            }

            if (testList)
            {
                string lstFile = "list.xml";
                DBLoginInfo e1 = new DBLoginInfo();
                e1.ServerName = "(local)";
                List<KVPair<string, DBLoginInfo>> lst1 = new List<KVPair<string, DBLoginInfo>>();
                lst1.Add(new KVPair<string, DBLoginInfo>("(local)", e1));
                lst1.Sort();

                ObjSerializer.Save(lstFile, lst1);
                List<KVPair<string, DBLoginInfo>> lst2 = ObjSerializer.Load<List<KVPair<string, DBLoginInfo>>>(lstFile);
                lst2.Sort();
                foreach (KVPair<string, DBLoginInfo> item in lst1)
                {
                    Assert.IsTrue(lst2.Contains(item));
                }
            }
        }

        private string QueryType(Type queriedType)
        {
            StringBuilder resultBuffer = new StringBuilder();

            resultBuffer.AppendFormat("Class {0} ======= \r\n", queriedType.ToString());
            resultBuffer.AppendLine("Methods:");
            MethodInfo[] methods = queriedType.GetMethods();
            foreach (MethodInfo m in methods)
                resultBuffer.AppendLine("\t" + m.Name);

            resultBuffer.AppendLine();
            resultBuffer.AppendLine("Properties:");
            PropertyInfo[] props = queriedType.GetProperties();
            foreach (PropertyInfo p in props)
                resultBuffer.AppendLine("\t" + p.Name);

            resultBuffer.AppendLine();
            resultBuffer.Append("Fields:");
            FieldInfo[] fields = queriedType.GetFields();
            foreach (FieldInfo f in fields)
                resultBuffer.AppendLine("\t" + f.Name);

            return resultBuffer.ToString();
        }


    }

}
