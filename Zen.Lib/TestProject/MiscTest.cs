// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;

using Zen.Utilities;
using Zen.Utilities.Proc;
using Zen.Utilities.FileUtil;
using System.Text;

namespace _TestProject
{
    [TestClass()]
    public class MiscTest : TestBase
    {
        [TestMethod()]
        public void GetChecksumTest()
        {
            const string testLine = @"using Microsoft.VisualStudio.TestTools.UnitTesting;";

            byte[] bytes = new byte[testLine.Length];
            for(int i = 0; i < testLine.Length; i++)
                bytes[i] = System.Convert.ToByte(testLine[i]);

            uint parityCksum = CheckSum.RunParity(bytes);
            uint crcCksum = CheckSum.RunCrc32(bytes);
            //string cksum = string.Format("{0:X2}", GetChecksum(bytes));
            //string cksum = string.Format("{0:X2}", CheckSum.RunCrc32(bytes));

            //ASCIIEncoding encoding = new ASCIIEncoding();
            //string cksum = encoding.GetString(CheckSum.RunCrc32(bytes));
        }

        //[TestMethod()]
        public void FooTest()
        {
            B.Foo1();
            B.Foo2();
        }

        [TestMethod()]
        public void IdentifierToPhraseTest()
        {
            string[] testLines = new string[]
            {
                "IdentifierToPhraseTest", 
                "OutputDirectory",
                "outputDirectory",
                "Generics.Reflection"
            };

            string phrase = null;
            foreach (string idWord in testLines)
            {
                phrase = Zen.Utilities.Text.NameCleaner.ToPhrase(idWord);
                Assert.IsTrue(phrase.Length > idWord.Length);
            }
        }
    }

    public class A
    {
        public static int Foo1() { return 1;}
    }

    public class B: A
    {
        public static int Foo2() { return 2; }
    }

}
